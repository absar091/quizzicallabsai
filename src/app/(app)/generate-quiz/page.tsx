

"use client";

import { useState, useEffect, useCallback, useRef } from "react";
import { useForm, FormProvider, useFormContext } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { AnimatePresence, motion } from "framer-motion";
import { Sparkles, ArrowLeft, ArrowRight, Download, MessageSquareQuote, Redo, LayoutDashboard, Star, FileText, Settings, Eye, Brain, Lightbulb, Puzzle, BookCopy, Clock, CheckCircle, XCircle, BarChart, SlidersHorizontal, ShieldAlert, BrainCircuit, AlertTriangle, TimerOff, Bell } from "lucide-react";
import RichContentRenderer from '@/components/rich-content-renderer';


import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardHeader, CardTitle, CardFooter, CardDescription } from "@/components/ui/card";
import { PageHeader } from "@/components/page-header";
import { useToast } from "@/hooks/use-toast";
import { generateCustomQuiz, GenerateCustomQuizOutput } from "@/ai/flows/generate-custom-quiz";
import { generateExplanationsForIncorrectAnswers } from "@/ai/flows/generate-explanations-for-incorrect-answers";
import { generateSimpleExplanation } from "@/ai/flows/generate-simple-explanation";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Label } from "@/components/ui/label";
import { Checkbox } from "@/components/ui/checkbox";
import { Slider } from "@/components/ui/slider";
import { Progress } from "@/components/ui/progress";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { cn } from "@/lib/utils";
import { useAuth } from "@/hooks/useAuth";
import Link from "next/link";
import { get, getDatabase, ref, serverTimestamp, set } from "firebase/database";
import { db } from "@/lib/firebase";
import { 
    getQuizState, 
    saveQuizState, 
    deleteQuizState, 
    getBookmarks, 
    saveBookmark, 
    deleteBookmark, 
    saveQuizResult,
    BookmarkedQuestion
} from "@/lib/indexed-db";
import { Textarea } from "@/components/ui/textarea";

const formSchema = z.object({
  topic: z.string().min(1, "Topic is required."),
  difficulty: z.enum(["easy", "medium", "hard", "master"]),
  numberOfQuestions: z.number().min(1).max(55),
  questionTypes: z.array(z.string()).refine((value) => value.some((item) => item), {
    message: "You have to select at least one question type.",
  }),
  questionStyles: z.array(z.string()).refine((value) => value.some((item) => item), {
    message: "You have to select at least one question style.",
  }),
  timeLimit: z.number().min(1).max(120),
  specificInstructions: z.string().optional(),
});

type QuizFormValues = z.infer<typeof formSchema>;
export type Quiz = GenerateCustomQuizOutput["quiz"];

interface ExplanationState {
  [questionIndex: number]: {
    isLoading: boolean;
    explanation: string | null;
    isSimpleLoading: boolean;
    simpleExplanation: string | null;
  };
}

const addPdfHeaderAndFooter = (doc: any, title: string, difficulty: string) => {
    const pageCount = (doc as any).internal.getNumberOfPages();
    const pageWidth = doc.internal.pageSize.getWidth();
    const pageHeight = doc.internal.pageSize.getHeight();

    for (let i = 1; i <= pageCount; i++) {
        doc.setPage(i);
        
        // Header
        doc.setFont('helvetica', 'bold');
        doc.setFontSize(16);
        doc.text("Quizzicallabs™", pageWidth / 2, 15, { align: 'center' });
        
        doc.setFontSize(14);
        doc.text(`Quiz Topic: ${title}`, pageWidth / 2, 25, { align: 'center' });
        
        doc.setFont('helvetica', 'normal');
        doc.setFontSize(10);
        doc.text(`Difficulty: ${difficulty}`, pageWidth / 2, 31, { align: 'center' });
        
        doc.setLineWidth(0.2);
        doc.line(20, 38, pageWidth - 20, 38);
        
        // Watermark
        doc.saveGraphicsState();
        doc.setFontSize(60);
        doc.setTextColor(230, 230, 230);
        doc.setGState(new (doc as any).GState({opacity: 0.5}));
        doc.text("Quizzicallabs AI", pageWidth / 2, pageHeight / 2, { angle: 45, align: 'center' });
        doc.restoreGraphicsState();

        // Footer
        doc.setFont('helvetica', 'normal');
        doc.setFontSize(8);
        doc.setLineWidth(0.2);
        doc.line(20, pageHeight - 18, pageWidth - 20, pageHeight - 18);
        doc.text(`Generated by Quizzicallabs™ - A Project By Absar Ahmad Rao`, pageWidth / 2, pageHeight - 10, { align: 'center' });
    }
}

type GenerateQuizPageProps = {
  initialQuiz?: Quiz;
  initialFormValues?: QuizFormValues;
  initialComprehensionText?: string;
}

// --- Main Page Component ---
export default function GenerateQuizPage({ initialQuiz, initialFormValues, initialComprehensionText }: GenerateQuizPageProps) {
  const { toast } = useToast();
  const { user } = useAuth();
  const [isGenerating, setIsGenerating] = useState(false);
  const [generationProgress, setGenerationProgress] = useState(0);
  
  const [quiz, setQuiz] = useState<Quiz | null>(null);
  const [comprehensionText, setComprehensionText] = useState<string | null>(null);
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [userAnswers, setUserAnswers] = useState<(string | null)[]>([]);
  const [showResults, setShowResults] = useState(false);
  const [explanations, setExplanations] = useState<ExplanationState>({});
  
  const [formValues, setFormValues] = useState<QuizFormValues | null>(null);
  const [timeLeft, setTimeLeft] = useState(0);

  const timerRef = useRef<NodeJS.Timeout | null>(null);
  const hasInitialized = useRef(false);

  const formMethods = useForm<QuizFormValues>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      topic: "",
      difficulty: "medium",
      numberOfQuestions: 10,
      questionTypes: ["Multiple Choice"],
      questionStyles: ["Knowledge-based", "Conceptual"],
      timeLimit: 10,
      specificInstructions: "",
    },
  });

  const calculateScore = useCallback(() => {
    if (!quiz) return { score: 0, percentage: 0, totalScorable: 0 };
    const score = quiz.reduce((acc, question, index) => {
      const userAnswer = userAnswers[index];
      const correctAnswer = question.correctAnswer;
      if (question.type === 'descriptive' || correctAnswer === undefined) {
        return acc;
      }
      return acc + (correctAnswer === userAnswer ? 1 : 0);
    }, 0);
  
    const scorableQuestions = quiz.filter(q => q.type !== 'descriptive' && q.correctAnswer !== undefined).length;
    const percentage = scorableQuestions > 0 ? (score / scorableQuestions) * 100 : 0;
    
    return { score, percentage, totalScorable: scorableQuestions };
  }, [quiz, userAnswers]);


  const handleSubmit = useCallback(async () => {
    if ((window as any).__MOCK_TEST_SUBMIT_OVERRIDE__) {
        (window as any).__MOCK_TEST_SUBMIT_OVERRIDE__(userAnswers);
        return;
    }

    setShowResults(true);
    if(quiz && formValues && user) {
        const { score, percentage } = calculateScore();
        const resultId = `${user.uid}-${Date.now()}`;
        const newResult = {
            id: resultId,
            userId: user.uid,
            topic: formValues.topic,
            score,
            total: quiz.length,
            percentage,
            date: new Date().toISOString(),
        };
        const resultRef = ref(db, `quizResults/${user.uid}/${resultId}`);
        await set(resultRef, newResult);
        await saveQuizResult(newResult);
        await deleteQuizState(user.uid);
    }
    window.scrollTo(0, 0);
  }, [quiz, userAnswers, formValues, user, calculateScore]);


  useEffect(() => {
    // This effect handles the one-time initialization from props or IndexedDB
    const initializeQuiz = async () => {
        if (hasInitialized.current) return;
        hasInitialized.current = true;

        // Scenario 1: Mock test results are being displayed
        const mockTestAnswers = (window as any).__MOCK_TEST_ANSWERS__;
        if (initialQuiz && initialFormValues && mockTestAnswers) {
            setQuiz(initialQuiz);
            setFormValues(initialFormValues);
            setUserAnswers(mockTestAnswers);
            setShowResults(true);
            delete (window as any).__MOCK_TEST_ANSWERS__;
            return;
        }

        // Scenario 2: A pre-generated quiz is starting (e.g., mock test section, chapter test)
        if (initialQuiz && initialFormValues) {
            setQuiz(initialQuiz);
            setComprehensionText(initialComprehensionText || null);
            setUserAnswers(new Array(initialQuiz.length).fill(null));
            setTimeLeft(initialFormValues.timeLimit * 60);
            setFormValues(initialFormValues);
            setShowResults(false);
            return;
        }

        // Scenario 3: Resuming a quiz from local storage
        if (user) {
            const savedState = await getQuizState(user.uid);
            if (savedState && savedState.quiz && savedState.formValues) {
                setQuiz(savedState.quiz);
                setComprehensionText(savedState.comprehensionText || null);
                setCurrentQuestion(savedState.currentQuestion);
                setUserAnswers(savedState.userAnswers);
                setTimeLeft(savedState.timeLeft);
                setFormValues(savedState.formValues);
                setShowResults(false);
                return;
            }
        }
        
        // Scenario 4: No quiz state, show the form
        setQuiz(null);
        setShowResults(false);
    };

    initializeQuiz();
  }, [user, initialQuiz, initialFormValues, initialComprehensionText]);


  const [bookmarkedQuestions, setBookmarkedQuestions] = useState<BookmarkedQuestion[]>([]);

  useEffect(() => {
    async function loadBookmarks() {
        if (user) {
            const bookmarks = await getBookmarks(user.uid);
            setBookmarkedQuestions(bookmarks);
        }
    }
    loadBookmarks();
  }, [user]);

  useEffect(() => {
    async function persistState() {
        // Only persist if there's a quiz, not showing results, and it's not a pre-defined mock test
        if (user && quiz && !showResults && !initialQuiz) {
            await saveQuizState(user.uid, {
                quiz,
                comprehensionText,
                currentQuestion,
                userAnswers,
                timeLeft,
                formValues,
            });
        }
    }
    persistState();
  }, [quiz, comprehensionText, currentQuestion, userAnswers, timeLeft, formValues, showResults, user, initialQuiz]);


  useEffect(() => {
    if (timerRef.current) {
      clearInterval(timerRef.current);
    }

    if (quiz && !showResults && timeLeft > 0) {
      timerRef.current = setInterval(() => {
        setTimeLeft((prevTime) => {
          if (prevTime <= 1) {
            if (timerRef.current) clearInterval(timerRef.current);
            handleSubmit();
            return 0;
          }
          return prevTime - 1;
        });
      }, 1000);
    }

    return () => {
      if (timerRef.current) {
        clearInterval(timerRef.current);
      }
    };
  }, [quiz, showResults, timeLeft, handleSubmit]);
  
  const handleGenerateQuiz = async (values: QuizFormValues) => {
    setIsGenerating(true);
    setFormValues(values);
    setGenerationProgress(0);
    
    const interval = setInterval(() => {
        setGenerationProgress(prev => {
            if (prev >= 95) {
                clearInterval(interval);
                return prev;
            }
            return prev + 5;
        })
    }, 500);

    setQuiz(null);
    setComprehensionText(null);
    setCurrentQuestion(0);
    setUserAnswers([]);
    setShowResults(false);
    setExplanations({});
    
    try {
      const result = await generateCustomQuiz({
        ...values,
        userAge: user?.age,
        userClass: user?.className,
      });
      clearInterval(interval);
      setGenerationProgress(100);
      
      setTimeout(() => {
        if (!result.quiz || result.quiz.length === 0) {
           throw new Error("The AI returned an empty quiz. This can happen with very niche topics. Please try broadening your topic or rephrasing your instructions.");
        }
        setQuiz(result.quiz);
        setComprehensionText(result.comprehensionText || null);
        setUserAnswers(new Array(result.quiz.length).fill(null));
        setTimeLeft(values.timeLimit * 60);
        setIsGenerating(false);
        setFormValues(values);
      }, 500)

    } catch (error: any) {
        clearInterval(interval);
        setIsGenerating(false);
        setFormValues(null);
        let errorMessage = "An unexpected response was received from the server.";
        if (error.message && (error.message.includes("503") || error.message.includes("overloaded"))) {
          errorMessage = "The AI model is currently overloaded. Please wait a moment and try again.";
        } else if (error?.message?.includes("429")) {
            errorMessage = "You have hit a rate limit. Please try again after some time.";
        } else if (error.message && !error.message.includes('Unexpected')) {
            errorMessage = error.message;
        }
      toast({
        title: "Error Generating Quiz",
        description: errorMessage,
        variant: "destructive",
      });
      console.error(error);
    }
  };


  const handleAnswer = (answer: string) => {
    const newAnswers = [...userAnswers];
    newAnswers[currentQuestion] = answer;
    setUserAnswers(newAnswers);
  };
  
  const handleNext = () => {
    if (currentQuestion < (quiz?.length ?? 0) - 1) {
      setCurrentQuestion(currentQuestion + 1);
    } else {
      handleSubmit();
    }
  };

  const handleBack = () => {
    if (currentQuestion > 0) {
      setCurrentQuestion(currentQuestion + 1);
    }
  };

  const getExplanation = async (questionIndex: number) => {
    if (!quiz || !formValues) return;
    const question = quiz[questionIndex];
    setExplanations((prev) => ({
      ...prev,
      [questionIndex]: { ...prev[questionIndex], isLoading: true, explanation: null },
    }));

    try {
      const result = await generateExplanationsForIncorrectAnswers({
        question: question.question,
        studentAnswer: userAnswers[questionIndex] || "",
        correctAnswer: question.correctAnswer || "N/A",
        topic: formValues.topic,
      });
      setExplanations((prev) => ({
        ...prev,
        [questionIndex]: { ...prev[questionIndex], isLoading: false, explanation: result.explanation },
      }));
    } catch (error) {
      toast({
        title: "Error Generating Explanation",
        description: "An error occurred while generating the explanation. Please try again.",
        variant: "destructive",
      });
       setExplanations((prev) => ({
        ...prev,
        [questionIndex]: { ...prev[questionIndex], isLoading: false, explanation: "Could not load explanation." },
      }));
      console.error(error);
    }
  };
  
  const getSimpleExplanation = async (questionIndex: number) => {
    if (!quiz || !formValues) return;
    const question = quiz[questionIndex];
    setExplanations((prev) => ({
      ...prev,
      [questionIndex]: { ...prev[questionIndex], isSimpleLoading: true, simpleExplanation: null },
    }));
    
    try {
        const result = await generateSimpleExplanation({
            question: question.question,
            correctAnswer: question.correctAnswer || "N/A",
            topic: formValues.topic,
        });
        setExplanations((prev) => ({
            ...prev,
            [questionIndex]: { ...prev[questionIndex], isSimpleLoading: false, simpleExplanation: result.explanation },
        }));
    } catch (error) {
        toast({
            title: "Error Simplifying",
            description: "Could not generate a simpler explanation at this time.",
            variant: "destructive",
        });
        setExplanations((prev) => ({
            ...prev,
            [questionIndex]: { ...prev[questionIndex], isSimpleLoading: false, simpleExplanation: "Could not load simple explanation." },
        }));
    }
  }

  const downloadQuestions = async () => {
    if (!quiz || !formValues) return;
    const { default: jsPDF } = await import('jspdf');
    const doc = new jsPDF();
    let y = 45;
    const pageHeight = 270;
    const margin = 20;
    const maxWidth = doc.internal.pageSize.getWidth() - (margin * 2);

    const checkPageBreak = (neededHeight: number) => {
        if (y + neededHeight > pageHeight) {
            doc.addPage();
            y = 45;
        }
    };

    quiz.forEach((q, i) => {
        checkPageBreak(30);

        doc.setFont('helvetica', 'bold');
        doc.setFontSize(12);
        doc.text(doc.splitTextToSize(`${i + 1}. ${q.question}`, maxWidth), margin, y);
        y += (doc.splitTextToSize(`${i + 1}. ${q.question}`, maxWidth).length * 5) + 5;

        doc.setFont('helvetica', 'normal');
        doc.setFontSize(11);
        if (q.answers) {
            q.answers.forEach((a, ansIndex) => {
                checkPageBreak(5);
                const letter = String.fromCharCode(65 + ansIndex);
                doc.text(doc.splitTextToSize(`${letter}. ${a}`, maxWidth - 5), margin + 5, y);
                y += (doc.splitTextToSize(`- ${a}`, maxWidth - 5).length * 4) + 3;
            });
        }
        
        y += 5;
    });

    if (formValues.questionTypes.includes('Multiple Choice')) {
        doc.addPage();
        y = 45;
        doc.setFont('helvetica', 'bold');
        doc.setFontSize(14);
        doc.text("Answer Key", margin, y);
        y += 10;
        
        doc.setFont('helvetica', 'normal');
        doc.setFontSize(11);
        quiz.forEach((q, i) => {
            if(q.type === 'multiple-choice') {
                checkPageBreak(5);
                 const correctAnswerLetter = String.fromCharCode(65 + (q.answers?.findIndex(ans => ans === q.correctAnswer) ?? 0));
                doc.text(`${i + 1}. ${correctAnswerLetter}`, margin, y);
                y += 6;
            }
        });
    }

    addPdfHeaderAndFooter(doc, formValues.topic, formValues.difficulty);
    doc.save(`${formValues.topic.replace(/\s+/g, '_')}_quiz.pdf`);
  };

  const downloadResultCard = async () => {
    if (!quiz || !formValues) return;
    const { default: jsPDF } = await import('jspdf');
    const { score, percentage, totalScorable } = calculateScore();
    const doc = new jsPDF();
    
    addPdfHeaderAndFooter(doc, "Quiz Result Card", formValues.difficulty);

    let y = 50;

    doc.setFontSize(14);
    doc.text(`Student: ${user?.displayName || 'N/A'}`, 20, y);
    y += 10;
    doc.text(`Topic: ${formValues.topic}`, 20, y);
    y += 15;

    doc.setFontSize(16);
    doc.text(`Score: ${score}/${totalScorable}`, 20, y);
    y += 10;
    doc.text(`Percentage: ${percentage.toFixed(0)}%`, 20, y);
    y += 10;
    doc.text(`Status: ${percentage >= 50 ? 'Pass' : 'Fail'}`, 20, y);
    
    doc.save('quiz_result_card.pdf');
  };
  
  const toggleBookmark = async (question: string, correctAnswer: string) => {
    if(!formValues || !user) return;
    
    const isCurrentlyBookmarked = bookmarkedQuestions.some(bm => bm.question === question);
    const bookmarkId = btoa(question); // Use base64 encoded question as a safe key
    
    if (isCurrentlyBookmarked) {
        // Remove from Firebase and local state
        const bookmarkRef = ref(db, `bookmarks/${user.uid}/${bookmarkId}`);
        await set(bookmarkRef, null);
        await deleteBookmark(user.uid, question);
        setBookmarkedQuestions(prev => prev.filter(bm => bm.question !== question));
    } else {
        const newBookmark: BookmarkedQuestion = { 
            userId: user.uid,
            question, 
            correctAnswer, 
            topic: formValues.topic 
        };
        // Save to Firebase and local state
        const bookmarkRef = ref(db, `bookmarks/${user.uid}/${bookmarkId}`);
        await set(bookmarkRef, newBookmark);
        await saveBookmark(newBookmark);
        setBookmarkedQuestions(prev => [...prev, newBookmark]);
    }
  };

  const resetQuiz = async () => {
    if(initialQuiz) {
        if (window.location.pathname.includes('mdcat')) {
           window.location.href = '/mdcat';
        } else if (window.location.pathname.includes('ecat')) {
            window.location.href = '/ecat';
        } else if (window.location.pathname.includes('nts')) {
            window.location.href = '/nts';
        }
        return;
    }
    if (user) {
        await deleteQuizState(user.uid);
    }
    setQuiz(null);
    setCurrentQuestion(0);
    setUserAnswers([]);
    setShowResults(false); 
    setExplanations({});
    setFormValues(null);
    formMethods.reset();
    window.scrollTo(0, 0);
  };

  const retryIncorrect = () => {
    if (!quiz || !formValues) return;
    const incorrectQuestions = quiz.filter((q, i) => q.correctAnswer !== userAnswers[i] && q.type !== 'descriptive');
    if (incorrectQuestions.length === 0) {
        toast({
            title: "No incorrect answers!",
            description: "You got everything right. Well done!",
        });
        return;
    }
    
    const newFormValues = {
        ...formValues,
        topic: `Retry: ${formValues.topic}`,
        numberOfQuestions: incorrectQuestions.length,
        timeLimit: Math.max(5, Math.ceil(incorrectQuestions.length * 0.75)), // Adjust time limit
        questionStyles: [], // Use default styles for retry
    };

    setQuiz(incorrectQuestions);
    setFormValues(newFormValues);
    setCurrentQuestion(0);
    setUserAnswers(new Array(incorrectQuestions.length).fill(null));
    setTimeLeft(newFormValues.timeLimit * 60);
    setShowResults(false);
    setExplanations({});
    window.scrollTo(0, 0);
  };
  
  
  // --- Conditional Rendering ---

  if (isGenerating) {
    return (
      <div className="flex flex-col items-center justify-center min-h-[60svh] text-center p-4">
        <div className="relative">
            <BrainCircuit className="h-20 w-20 text-primary" />
            <motion.div
                className="absolute inset-0 flex items-center justify-center"
                animate={{ rotate: 360 }}
                transition={{ duration: 2, repeat: Infinity, ease: "linear" }}
            >
                <Sparkles className="h-8 w-8 text-accent animate-pulse" />
            </motion.div>
        </div>
        <h2 className="text-2xl font-semibold mb-2 mt-6">Generating Your Quiz...</h2>
        <p className="text-muted-foreground max-w-sm mb-6">Please wait while our AI crafts the perfect quiz for you.</p>
        <div className="w-full max-w-sm">
           <Progress value={generationProgress} />
           <p className="text-sm mt-2 text-primary font-medium">{generationProgress}%</p>
        </div>
      </div>
    );
  }
  
  const cardVariants = {
    hidden: { opacity: 0, x: 20 },
    visible: { opacity: 1, x: 0 },
    exit: { opacity: 0, x: -20 },
  };

  if (quiz && !showResults) {
    const currentQ = quiz[currentQuestion];
    const progress = ((currentQuestion + 1) / quiz.length) * 100;
    
    return (
      <FormProvider {...formMethods}>
        <div className="flex flex-col">
            <div className="flex items-center justify-between mb-4">
                <p className="text-sm font-medium text-muted-foreground">Question {currentQuestion + 1} of {quiz.length}</p>
                <div className="flex items-center gap-2 text-sm font-medium text-muted-foreground">
                    <Clock className="h-4 w-4" />
                    <span>{Math.floor(timeLeft / 60)}:{(timeLeft % 60).toString().padStart(2, '0')}</span>
                </div>
            </div>
            <Progress value={progress} className="h-2 w-full mb-6" />

           {comprehensionText && (
                <Card className="w-full max-w-4xl mx-auto mb-8 bg-muted/50">
                    <CardHeader>
                        <CardTitle>Reading Passage</CardTitle>
                        <CardDescription>Read the passage below to answer the following questions.</CardDescription>
                    </CardHeader>
                    <CardContent className="prose prose-sm dark:prose-invert max-h-48 overflow-y-auto p-4 border rounded-lg bg-background">
                        <RichContentRenderer content={comprehensionText} />
                    </CardContent>
                </Card>
            )}

          <AnimatePresence mode="wait">
              <motion.div
                  key={currentQuestion}
                  variants={cardVariants}
                  initial="hidden"
                  animate="visible"
                  exit="exit"
                  transition={{ duration: 0.3 }}
                  className="w-full"
              >
                <div className="space-y-6">
                    <div className="text-center text-xl sm:text-2xl font-semibold leading-relaxed min-h-[6rem]">
                        <RichContentRenderer content={currentQ.question} smiles={currentQ.smiles} chartData={currentQ.chartData} placeholder={currentQ.placeholder} />
                    </div>
                    <div className="w-full max-w-md mx-auto">
                      {currentQ.type === 'descriptive' ? (
                          <Textarea
                              value={userAnswers[currentQuestion] || ""}
                              onChange={(e) => handleAnswer(e.target.value)}
                              placeholder="Type your answer here..."
                              rows={5}
                              className="text-base"
                          />
                      ) : (
                          <RadioGroup
                              value={userAnswers[currentQuestion] || ""}
                              onValueChange={handleAnswer}
                              className="grid grid-cols-1 gap-3"
                          >
                              {(currentQ.answers || []).map((answer, index) => {
                              return (
                                  <div key={index}>
                                      <RadioGroupItem value={answer} id={`q${currentQuestion}a${index}`} className="sr-only peer" />
                                      <Label htmlFor={`q${currentQuestion}a${index}`} className="flex items-center p-4 rounded-xl bg-card shadow-sm hover:bg-secondary cursor-pointer min-h-[60px] text-base transition-all border-2 border-transparent peer-data-[state=checked]:border-primary peer-data-[state=checked]:bg-primary/10">
                                          <div className="flex-1 text-left"><RichContentRenderer content={answer} /></div>
                                      </Label>
                                  </div>
                              )
                              })}
                          </RadioGroup>
                      )}
                    </div>
                </div>
              </motion.div>
          </AnimatePresence>
            
          <div className="mt-8 flex justify-center w-full">
            <Button onClick={handleNext} size="lg" className="bg-accent text-accent-foreground hover:bg-accent/90 w-full max-w-sm">
                {currentQuestion === quiz.length - 1 ? "Submit Quiz" : "Next Question"}
                {currentQuestion !== quiz.length - 1 && <ArrowRight className="ml-2 h-5 w-5" />}
            </Button>
          </div>
        </div>
      </FormProvider>
    );
  }
  
  if (showResults && quiz && formValues) {
    const { score, percentage, totalScorable } = calculateScore();
    const incorrectAnswers = quiz.filter((q, i) => q.correctAnswer !== userAnswers[i] && q.type !== 'descriptive');

    return (
       <div className="max-w-4xl mx-auto">
            <PageHeader title="Quiz Results" description={`You scored ${score} out of ${totalScorable}.`} />
            <Card>
                <CardHeader>
                    <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
                         <CardTitle>Result Details</CardTitle>
                         <div className="flex flex-wrap gap-2">
                            <Button variant="outline" onClick={downloadQuestions}><Download className="mr-2 h-4 w-4" /> Questions</Button>
                            <Button onClick={downloadResultCard}><Download className="mr-2 h-4 w-4" /> Result Card</Button>
                         </div>
                    </div>
                </CardHeader>
                <CardContent className="pt-6">
                    <div className="grid grid-cols-1 sm:grid-cols-3 gap-4 mb-6 text-center">
                        <Card className="p-4 bg-muted/50">
                            <CardTitle className="text-3xl font-bold">{score}/{totalScorable}</CardTitle>
                            <CardDescription>Score</CardDescription>
                        </Card>
                         <Card className="p-4 bg-muted/50">
                            <CardTitle className="text-3xl font-bold">{percentage.toFixed(0)}%</CardTitle>
                             <CardDescription>Percentage</CardDescription>
                        </Card>
                         <Card className="p-4 bg-muted/50">
                            <CardTitle className={cn("text-3xl font-bold", percentage >= 50 ? "text-primary" : "text-destructive")}>{percentage >= 50 ? 'Pass' : 'Fail'}</CardTitle>
                             <CardDescription>Status</CardDescription>
                        </Card>
                    </div>

                    <div>
                        <h3 className="text-xl font-bold mb-4">Review Your Answers</h3>
                        <div className="space-y-4">
                            {quiz.map((q, index) => {
                                const isCorrect = q.correctAnswer === userAnswers[index];
                                const explanationState = explanations[index];
                                const isBookmarked = bookmarkedQuestions.some(bm => bm.question === q.question);

                                return (
                                    <Card key={index} className={cn("bg-muted/30", isCorrect ? "border-primary/20" : "border-destructive/20")}>
                                        <CardHeader className="flex flex-row justify-between items-start pb-2">
                                            <div className="font-semibold flex-1 pr-4"><RichContentRenderer content={`${index + 1}. ${q.question}`} smiles={q.smiles} chartData={q.chartData} placeholder={q.placeholder} /></div>
                                            {q.correctAnswer && (
                                                <Button variant="ghost" size="icon" onClick={() => toggleBookmark(q.question, q.correctAnswer || "")}>
                                                    <Star className={cn("h-5 w-5", isBookmarked ? "text-yellow-400 fill-yellow-400" : "text-muted-foreground")} />
                                                    <span className="sr-only">Bookmark</span>
                                                </Button>
                                            )}
                                        </CardHeader>
                                        <CardContent className="p-4 sm:p-6 pt-2">
                                            <div className="text-sm mt-2 space-y-1">
                                                 <p className={cn("flex items-start gap-2", isCorrect ? 'text-primary' : 'text-destructive')}>
                                                    {isCorrect ? <CheckCircle className="h-4 w-4 shrink-0 mt-0.5" /> : <XCircle className="h-4 w-4 shrink-0 mt-0.5" />}
                                                    <span>Your answer: <RichContentRenderer content={userAnswers[index] || "Skipped"} /></span>
                                                 </p>
                                                 {!isCorrect && q.correctAnswer && (
                                                     <p className="text-primary flex items-start gap-2">
                                                        <CheckCircle className="h-4 w-4 shrink-0 mt-0.5" />
                                                        <span>Correct answer: <RichContentRenderer content={q.correctAnswer} /></span>
                                                     </p>
                                                 )}
                                                 {q.type === 'descriptive' && !q.correctAnswer && (
                                                    <p className="flex items-start gap-2 text-muted-foreground">
                                                         <MessageSquareQuote className="h-4 w-4 shrink-0 mt-0.5" />
                                                         <span>Your Answer: {userAnswers[index] || "Not answered"}</span>
                                                    </p>
                                                 )}
                                            </div>
                                            
                                            {!isCorrect && q.type !== 'descriptive' && (
                                                <div className="mt-4 space-y-2">
                                                    {explanationState?.explanation && (
                                                        <Alert className="border-accent/50 text-accent-foreground bg-accent/10">
                                                            <AlertTitle className="text-accent-foreground/90 flex items-center gap-2"><Brain className="h-4 w-4" /> Detailed Explanation</AlertTitle>
                                                            <AlertDescription>{explanationState.explanation}</AlertDescription>
                                                        </Alert>
                                                    )}
                                                    {explanationState?.simpleExplanation && (
                                                         <Alert className="border-accent/50 text-accent-foreground bg-accent/10">
                                                            <AlertTitle className="text-accent-foreground/90 flex items-center gap-2"><Lightbulb className="h-4 w-4" /> Simple Explanation</AlertTitle>
                                                            <AlertDescription>{explanationState.simpleExplanation}</AlertDescription>
                                                         </Alert>
                                                    )}
                                                    <div className="flex flex-wrap gap-2">
                                                        <Button variant="outline" size="sm" onClick={() => getExplanation(index)} disabled={explanationState?.isLoading}>
                                                            {explanationState?.isLoading && <Loader2 className="mr-2 h-4 w-4 animate-spin"/>}
                                                            Detailed Explanation
                                                        </Button>
                                                        <Button variant="outline" size="sm" onClick={() => getSimpleExplanation(index)} disabled={explanationState?.isSimpleLoading}>
                                                            {explanationState?.isSimpleLoading && <Loader2 className="mr-2 h-4 w-4 animate-spin"/>}
                                                            Explain Like I'm 5
                                                        </Button>
                                                    </div>
                                                </div>
                                            )}
                                        </CardContent>
                                    </Card>
                                )
                            })}
                        </div>
                    </div>
                </CardContent>
                 <CardFooter className="flex flex-wrap justify-center gap-2 pt-4 border-t">
                    <Button onClick={resetQuiz}><Redo className="mr-2 h-4 w-4" /> {initialQuiz ? 'Go to Prep Home' : 'Take Another Quiz'}</Button>
                    {incorrectAnswers.length > 0 && (
                        <Button onClick={retryIncorrect} variant="outline"><Redo className="mr-2 h-4 w-4" /> Retry Incorrect</Button>
                    )}
                    <Button variant="outline" asChild><Link href="/dashboard"><LayoutDashboard className="mr-2 h-4 w-4"/> Back to Dashboard</Link></Button>
                </CardFooter>
            </Card>
       </div>
    );
  }

  return (
    <FormProvider {...formMethods}>
      <QuizSetupForm onGenerateQuiz={handleGenerateQuiz} />
    </FormProvider>
  );
}

const questionTypeOptions = [
    { id: "Multiple Choice", label: "Multiple Choice", icon: Puzzle },
    { id: "Descriptive", label: "Short/Long Answer", icon: FileText },
]
const questionStyleOptions = [
    { id: "Knowledge-based", label: "Knowledge-based", icon: Brain },
    { id: "Conceptual", label: "Conceptual", icon: Lightbulb },
    { id: "Numerical", label: "Numerical", icon: BarChart },
    { id: "Past Paper Style", label: "Past Paper Style", icon: BookCopy },
    { id: "Comprehension-based MCQs", label: "Comprehension-based", icon: MessageSquareQuote },
]

// --- Form Component ---
function QuizSetupForm({ onGenerateQuiz }: { onGenerateQuiz: (values: QuizFormValues) => void; }) {
    const form = useFormContext<QuizFormValues>();
    const watchQuestionTypes = form.watch('questionTypes');
    
    return (
        <div>
          <PageHeader
            title="Custom Quiz Generator"
            description="Create personalized tests on any topic, with custom difficulty and question styles."
          />
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onGenerateQuiz)} className="space-y-8">
              <Card>
                <CardHeader>
                  <CardTitle>1. Quiz Details</CardTitle>
                </CardHeader>
                <CardContent className="space-y-6">
                    <FormField
                      control={form.control}
                      name="topic"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Topic</FormLabel>
                          <FormControl>
                            <Input placeholder="e.g., The Solar System, React Hooks, The French Revolution" {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                     <FormField
                      control={form.control}
                      name="difficulty"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Difficulty Level</FormLabel>
                          <FormControl>
                            <RadioGroup
                              onValueChange={field.onChange}
                              defaultValue={field.value}
                              className="grid grid-cols-2 lg:grid-cols-4 gap-4 pt-2"
                            >
                              {["easy", "medium", "hard", "master"].map((level) => (
                                 <FormItem key={level} className="flex-1">
                                    <FormControl>
                                       <RadioGroupItem value={level} id={level} className="sr-only peer" />
                                    </FormControl>
                                    <Label htmlFor={level} className="flex h-full flex-col items-center justify-between rounded-xl border-2 border-muted bg-popover p-4 hover:bg-secondary peer-data-[state=checked]:border-primary [&:has([data-state=checked])]:border-primary cursor-pointer capitalize">
                                      {level}
                                    </Label>
                                  </FormItem>
                              ))}
                            </RadioGroup>
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle>2. Question Settings</CardTitle>
                </CardHeader>
                <CardContent className="space-y-6">
                    <FormField
                      control={form.control}
                      name="questionTypes"
                      render={() => (
                        <FormItem>
                          <FormLabel>Question Types</FormLabel>
                           <Alert className="mt-2 text-xs p-2">
                            <ShieldAlert className="h-4 w-4"/>
                            <AlertDescription>
                               For entry test topics (MDCAT/ECAT/NTS), the AI will automatically generate 'Multiple Choice' questions only, regardless of your selection, to match the real exam format.
                            </AlertDescription>
                           </Alert>
                          <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 pt-2">
                            {questionTypeOptions.map((item) => (
                              <FormField
                                key={item.id}
                                control={form.control}
                                name="questionTypes"
                                render={({ field }) => {
                                  return (
                                    <FormItem key={item.id} className="flex flex-row items-center space-x-3 space-y-0 rounded-xl border p-4 has-[:checked]:bg-primary/10 has-[:checked]:border-primary">
                                      <FormControl>
                                        <Checkbox
                                          checked={field.value?.includes(item.id)}
                                          onCheckedChange={(checked) => {
                                            return checked
                                              ? field.onChange([...field.value, item.id])
                                              : field.onChange(
                                                  field.value?.filter(
                                                    (value) => value !== item.id
                                                  )
                                                )
                                          }}
                                        />
                                      </FormControl>
                                      <FormLabel className="font-normal cursor-pointer flex-1 flex items-center gap-2">
                                        <item.icon className="h-4 w-4"/>
                                        {item.label}
                                      </FormLabel>
                                    </FormItem>
                                  )
                                }}
                              />
                            ))}
                          </div>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <FormField
                      control={form.control}
                      name="questionStyles"
                      render={() => (
                        <FormItem>
                          <FormLabel>Question Styles</FormLabel>
                           {watchQuestionTypes.includes('Comprehension-based MCQs') && (
                               <Alert className="mt-2 text-xs p-2">
                                <AlertTriangle className="h-4 w-4"/>
                                <AlertDescription>
                                    When 'Comprehension-based' is selected, the AI will generate a reading passage for the quiz.
                                </AlertDescription>
                               </Alert>
                           )}
                          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 pt-2">
                            {questionStyleOptions.map((item) => (
                              <FormField
                                key={item.id}
                                control={form.control}
                                name="questionStyles"
                                render={({ field }) => {
                                  return (
                                    <FormItem key={item.id} className="flex flex-row items-center space-x-3 space-y-0 rounded-xl border p-4 has-[:checked]:bg-primary/10 has-[:checked]:border-primary">
                                      <FormControl>
                                        <Checkbox
                                          checked={field.value?.includes(item.id)}
                                          onCheckedChange={(checked) => {
                                            return checked
                                              ? field.onChange([...(field.value || []), item.id])
                                              : field.onChange(
                                                  field.value?.filter(
                                                    (value) => value !== item.id
                                                  )
                                                )
                                          }}
                                        />
                                      </FormControl>
                                      <FormLabel className="font-normal cursor-pointer flex-1 flex items-center gap-2">
                                         <item.icon className="h-4 w-4"/>
                                        {item.label}
                                      </FormLabel>
                                    </FormItem>
                                  )
                                }}
                              />
                            ))}
                          </div>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                   <FormField
                      control={form.control}
                      name="numberOfQuestions"
                      render={({ field }) => (
                         <FormItem>
                          <FormLabel>Number of Questions: <span className="text-primary font-bold">{field.value}</span></FormLabel>
                           <FormControl>
                              <Slider onValueChange={(value) => field.onChange(value[0])} defaultValue={[field.value]} max={55} min={1} step={1} />
                          </FormControl>
                           <Alert className="mt-2 text-xs p-2">
                            <AlertTriangle className="h-4 w-4"/>
                            <AlertDescription>
                                The AI-generated count may sometimes vary slightly from your selection.
                            </AlertDescription>
                           </Alert>
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={form.control}
                      name="timeLimit"
                      render={({ field }) => (
                         <FormItem>
                          <FormLabel>Time Limit (Minutes): <span className="text-primary font-bold">{field.value}</span></FormLabel>
                           <FormControl>
                              <Slider onValueChange={(value) => field.onChange(value[0])} defaultValue={[field.value]} max={120} min={1} step={1} />
                          </FormControl>
                        </FormItem>
                      )}
                    />
                </CardContent>
              </Card>

                <Card>
                    <CardHeader>
                        <CardTitle>3. Fine-Tuning (Optional)</CardTitle>
                    </CardHeader>
                    <CardContent>
                        <FormField
                            control={form.control}
                            name="specificInstructions"
                            render={({ field }) => (
                                <FormItem>
                                <FormLabel>Specific Instructions for the AI</FormLabel>
                                <FormControl>
                                    <Textarea
                                    placeholder="e.g., Focus on the contributions of Louis Pasteur. Include questions about the 19th-century scientific context."
                                    className="resize-none"
                                    {...field}
                                    />
                                </FormControl>
                                <FormMessage />
                                </FormItem>
                            )}
                        />
                    </CardContent>
                </Card>

              <Button type="submit" size="lg" className="w-full bg-accent text-accent-foreground hover:bg-accent/90">
                 <Sparkles className="mr-2 h-5 w-5"/>
                 Generate Quiz
              </Button>
            </form>
          </Form>
        </div>
    )
}

    