"use client";

import { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { Loader2, Sparkles, BookOpen, Download, AlertTriangle, Eye } from "lucide-react";

import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle
} from "@/components/ui/card";
import { PageHeader } from "@/components/page-header";
import { useToast } from "@/hooks/use-toast";
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { cn } from "@/lib/utils";
import { usePlan } from "@/hooks/usePlan";
import { useAuth } from "@/context/AuthContext";
import { GenerationAd } from "@/components/ads/ad-banner";
import { QuestionsWizard } from "@/components/quiz-wizard/questions-wizard";
import { QuizGenerationLoading } from '@/components/enhanced-loading';

const formSchema = z.object({
  topic: z.string().min(3, "Topic(s) or chapter(s) are required."),
  difficulty: z.enum(["easy", "medium", "hard", "master"]),
  numberOfQuestions: z.number().min(1).max(55),
});

type Question = {
  question: string;
  answers: string[];
  correctAnswer: string;
  explanation?: string;
};

const addPdfHeaderAndFooter = (doc: any, title: string, isPro: boolean) => {
  const pageCount = (doc as any).internal.getNumberOfPages();
  const pageWidth = doc.internal.pageSize.getWidth();
  const pageHeight = doc.internal.pageSize.getHeight();

  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);

    doc.setFont('helvetica', 'bold');
    doc.setFontSize(16);
    doc.text("Quizzicallabs™", pageWidth / 2, 15, { align: 'center' });

    doc.setFontSize(14);
    doc.text(title, pageWidth / 2, 25, { align: 'center' });
    doc.setLineWidth(0.2);
    doc.line(20, 32, pageWidth - 20, 32);

    if (!isPro) {
      doc.saveGraphicsState();
      doc.setFontSize(60);
      doc.setTextColor(230, 230, 230);
      doc.setGState(new (doc as any).GState({opacity: 0.5}));
      doc.text("Quizzicallabs AI", pageWidth / 2, pageHeight / 2, { angle: 45, align: 'center' });
      doc.restoreGraphicsState();
    }

    doc.setFont('helvetica', 'normal');
    doc.setFontSize(8);
    doc.setLineWidth(0.2);
    doc.line(20, pageHeight - 18, pageWidth - 20, pageHeight - 18);
    doc.text(`Generated by Quizzicallabs™ - A Project By Absar Ahmad Rao`, pageWidth / 2, pageHeight - 10, { align: 'center' });
  }
};

export default function GenerateQuestionsPage() {
  const { toast } = useToast();
  const { user } = useAuth();
  const { isPro } = usePlan();
  const [isGenerating, setIsGenerating] = useState(false);
  const [progress, setProgress] = useState(25);
  const [questions, setQuestions] = useState<Question[] | null>(null);

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      topic: "",
      difficulty: "medium",
      numberOfQuestions: 10,
    },
  });

  async function onSubmit(values: z.infer<typeof formSchema>) {
    setIsGenerating(true);
    setQuestions(null);
    setProgress(25);

    const progressInterval = setInterval(() => {
      setProgress(prev => {
        if (prev >= 90) {
          clearInterval(progressInterval);
          return prev;
        }
        return prev + Math.random() * 8 + 2;
      });
    }, 800);

    try {
      const response = await fetch('/api/ai/custom-quiz', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          ...values,
          isPro: user?.plan === 'Pro',
          questionTypes: ["Multiple Choice"],
          questionStyles: ["Knowledge-based", "Conceptual"],
          timeLimit: values.numberOfQuestions,
          userAge: user?.age,
          userClass: user?.className || 'General Student',
          specificInstructions: "For each question, provide a detailed explanation for the correct answer."
        })
      });

      clearInterval(progressInterval);
      setProgress(95);

      if (!response.ok) {
        throw new Error('Failed to generate questions');
      }

      const result = await response.json();

      if (result.error) {
        throw new Error(result.error);
      }
      if (!result.quiz || result.quiz.length === 0) {
        throw new Error("The AI failed to generate any questions. Please try refining your topic.");
      }

      setProgress(100);
      setTimeout(() => {
        setQuestions(result.quiz as Question[]);
      }, 500);

    } catch (error: any) {
      clearInterval(progressInterval);
      toast({
        title: "Error Generating Questions",
        description: error.message || "An error occurred while generating practice questions. The AI might be busy.",
        variant: "destructive",
      });
      console.error(error);
    } finally {
      setIsGenerating(false);
    }
  }

  const downloadPdf = async () => {
    if (!questions) return;
    const { default: jsPDF } = await import('jspdf');
    const doc = new jsPDF();
    const topic = form.getValues('topic');
    let y = 40;
    const margin = 20;
    const maxWidth = doc.internal.pageSize.getWidth() - (margin * 2);
    const pageHeight = 270;

    const checkPageBreak = (neededHeight: number) => {
      if (y + neededHeight > pageHeight) {
        doc.addPage();
        y = 40;
      }
    };

    questions.forEach((q, index) => {
      checkPageBreak(50);

      doc.setFontSize(12);
      doc.setFont('helvetica', 'bold');
      const questionText = doc.splitTextToSize(`${index + 1}. ${q.question}`, maxWidth);
      doc.text(questionText, margin, y);
      y += (questionText.length * 5) + 5;

      doc.setFont('helvetica', 'normal');
      doc.setFontSize(11);
      if (q.answers) {
        q.answers.forEach((opt, i) => {
          checkPageBreak(5);
          const optionLetter = String.fromCharCode(65 + i);
          const optionText = doc.splitTextToSize(`${optionLetter}. ${opt}`, maxWidth - 10);
          doc.text(optionText, margin + 5, y);
          y += (optionText.length * 4) + 2;
        });
      }

      y += 4;
      doc.setFont('helvetica', 'bold');
      doc.setTextColor(34, 139, 34);
      checkPageBreak(5);
      const answerText = doc.splitTextToSize(`Answer: ${q.correctAnswer}`, maxWidth);
      doc.text(answerText, margin, y);
      y += (answerText.length * 5) + 2;
      doc.setTextColor(0, 0, 0);

      y += 10;
    });

    addPdfHeaderAndFooter(doc, `Practice Questions: ${topic}`, user?.plan === 'Pro');
    doc.save(`${form.getValues('topic').replace(/\s+/g, '_')}_practice_questions.pdf`);
  };

  if (isGenerating) {
    return (
      <div>
        <QuizGenerationLoading
          progress={progress}
          onRetry={() => onSubmit(form.getValues())}
        />
        <div className="mt-8">
          <GenerationAd />
        </div>
      </div>
    );
  }

  if (questions && questions.length > 0) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-background via-background to-primary/5">
        <div className="container-modern py-8">
          <PageHeader
            title={`Practice Questions: ${form.getValues('topic')}`}
            description={`${questions.length} questions generated`}
          />

          <div className="flex flex-col sm:flex-row gap-4 mb-6">
            <Button onClick={() => setQuestions(null)} variant="outline">
              <Sparkles className="w-4 h-4 mr-2" />
              Generate More Questions
            </Button>
            <Button onClick={downloadPdf} variant="default">
              <Download className="w-4 h-4 mr-2" />
              Download PDF
            </Button>
          </div>

          <div className="space-y-4">
            {questions.map((question, index) => (
              <Card key={index} className="w-full">
                <CardHeader>
                  <CardTitle className="text-lg flex items-center gap-2">
                    <span className="bg-primary text-primary-foreground rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold">
                      {index + 1}
                    </span>
                    {question.question}
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  {question.answers && (
                    <Accordion type="multiple" className="w-full space-y-3">
                      <AccordionItem value={`options-${index}`} className="border rounded-lg">
                        <AccordionTrigger className="flex items-center justify-between px-4 py-3 text-left hover:no-underline text-sm">
                          <span>View Options (A, B, C, D)</span>
                        </AccordionTrigger>
                        <AccordionContent className="px-4 pb-4">
                          <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
                            {question.answers.map((answer, answerIndex) => (
                              <div
                                key={answerIndex}
                                className="p-3 rounded-lg border bg-muted/30 border-muted"
                              >
                                <span className="font-medium mr-2">
                                  {String.fromCharCode(65 + answerIndex)}.
                                </span>
                                <span className="text-sm">{answer}</span>
                              </div>
                            ))}
                          </div>
                        </AccordionContent>
                      </AccordionItem>

                      <AccordionItem value={`answer-${index}`} className="border rounded-lg">
                        <AccordionTrigger className="flex items-center justify-between px-4 py-3 text-left hover:no-underline text-sm">
                          <span className="flex items-center gap-1">
                            <Eye className="w-4 h-4" />
                            Show Answer
                          </span>
                        </AccordionTrigger>
                        <AccordionContent className="px-4 pb-4">
                          <div className="bg-green-50 dark:bg-green-950/30 border border-green-200 dark:border-green-800 p-4 rounded-lg">
                            <div className="flex items-center gap-2 mb-2">
                              <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                              <span className="font-medium text-green-800 dark:text-green-200">
                                Correct Answer: {String.fromCharCode(65 + question.answers.indexOf(question.correctAnswer))}. {question.correctAnswer}
                              </span>
                            </div>
                          </div>
                        </AccordionContent>
                      </AccordionItem>

                      {question.explanation && (
                        <AccordionItem value={`explanation-${index}`} className="border rounded-lg">
                          <AccordionTrigger className="flex items-center justify-between px-4 py-3 text-left hover:no-underline text-sm">
                            <span className="flex items-center gap-1">
                              <AlertTriangle className="w-4 h-4" />
                              Show Explanation
                            </span>
                          </AccordionTrigger>
                          <AccordionContent className="px-4 pb-4">
                            <Alert>
                              <AlertTriangle className="h-4 w-4" />
                              <AlertTitle>Explanation</AlertTitle>
                              <AlertDescription>
                                {question.explanation}
                              </AlertDescription>
                            </Alert>
                          </AccordionContent>
                        </AccordionItem>
                      )}
                    </Accordion>
                  )}
                </CardContent>
              </Card>
            ))}
          </div>

          <div className="mt-8">
            <GenerationAd />
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-background via-background to-primary/5">
      <div className="container-modern py-8">
        <QuestionsWizard
          onGenerateQuestions={onSubmit}
          isGenerating={isGenerating}
        />
      </div>
    </div>
  );
}
