"use client";

import { useState } from "react";
import { useForm, FormProvider } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { motion, AnimatePresence } from 'framer-motion';
import { Loader2, Sparkles, BookOpen, Download, AlertTriangle, Eye, ArrowLeft, Check, Edit } from "lucide-react";

import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Checkbox } from "@/components/ui/checkbox";
import { Slider } from "@/components/ui/slider";
import { Progress } from "@/components/ui/progress";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { PageHeader } from "@/components/page-header";
import { useToast } from "@/hooks/use-toast";
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { cn } from "@/lib/utils";
import { usePlan } from "@/hooks/usePlan";
import { useAuth } from "@/context/AuthContext";
import { GenerationAd } from "@/components/ads/ad-banner";
import { QuizGenerationLoading } from '@/components/enhanced-loading';

const formSchema = z.object({
  topic: z.string().min(3, "Topic(s) or chapter(s) are required."),
  mode: z.enum(["practice", "exam"]),
  difficulty: z.enum(["easy", "medium", "hard", "master"]),
  questionStyles: z.array(z.string()).min(1, "Select at least one question style"),
  numberOfQuestions: z.number().min(1).max(55),
  timeLimit: z.number().optional(),
});

type Question = {
  question: string;
  answers: string[];
  correctAnswer: string;
  explanation?: string;
};

const questionStyles = [
  { id: 'Knowledge-based', label: 'Knowledge-based', description: 'Fact recall, definitions, formulas.' },
  { id: 'Conceptual', label: 'Conceptual', description: 'Tests understanding of "why" or "how".' },
  { id: 'Numerical', label: 'Numerical', description: 'Involves solving/calculating with numbers.' },
  { id: 'Practice Questions', label: 'Practice Questions', description: 'Mixed practice with explanations.' },
];

const steps = [
  { id: 'topic', title: 'Topic', description: 'What subject do you want to practice?', fields: ['topic'], icon: BookOpen },
  { id: 'mode', title: 'Quiz Mode', description: 'Choose how you want to take your quiz.', fields: ['mode'], icon: Edit },
  { id: 'styles', title: 'Question Styles', description: 'Select the types of questions you want.', fields: ['questionStyles'], icon: Check },
  { id: 'config', title: 'Settings', description: 'Configure difficulty and number of questions.', fields: ['difficulty', 'numberOfQuestions', 'timeLimit'], icon: BookOpen },
  { id: 'summary', title: 'Summary & Generate', description: 'Review your settings and generate questions.', icon: Sparkles },
];

const addPdfHeaderAndFooter = (doc: any, title: string, isPro: boolean) => {
  const pageCount = (doc as any).internal.getNumberOfPages();
  const pageWidth = doc.internal.pageSize.getWidth();
  const pageHeight = doc.internal.pageSize.getHeight();

  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);

    doc.setFont('helvetica', 'bold');
    doc.setFontSize(16);
    doc.text("Quizzicallabs™", pageWidth / 2, 15, { align: 'center' });

    doc.setFontSize(14);
    doc.text(title, pageWidth / 2, 25, { align: 'center' });
    doc.setLineWidth(0.2);
    doc.line(20, 32, pageWidth - 20, 32);

    if (!isPro) {
      doc.saveGraphicsState();
      doc.setFontSize(60);
      doc.setTextColor(230, 230, 230);
      doc.setGState(new (doc as any).GState({opacity: 0.5}));
      doc.text("Quizzicallabs AI", pageWidth / 2, pageHeight / 2, { angle: 45, align: 'center' });
      doc.restoreGraphicsState();
    }

    doc.setFont('helvetica', 'normal');
    doc.setFontSize(8);
    doc.setLineWidth(0.2);
    doc.line(20, pageHeight - 18, pageWidth - 20, pageHeight - 18);
    doc.text(`Generated by Quizzicallabs™ - A Project By Absar Ahmad Rao`, pageWidth / 2, pageHeight - 10, { align: 'center' });
  }
};

export default function GenerateQuestionsPage() {
  const { toast } = useToast();
  const { user } = useAuth();
  const { isPro } = usePlan();
  const [isGenerating, setIsGenerating] = useState(false);
  const [progress, setProgress] = useState(25);
  const [questions, setQuestions] = useState<Question[] | null>(null);
  const [currentStep, setCurrentStep] = useState(0);

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      topic: "",
      mode: "practice",
      questionStyles: ["Knowledge-based"],
      difficulty: "medium",
      numberOfQuestions: 10,
      timeLimit: 10,
    },
  });

  const nextStep = async () => {
    const fields = steps[currentStep].fields;
    const isValid = await form.trigger(fields as any, { shouldFocus: true });
    if (isValid && currentStep < steps.length - 1) {
      setCurrentStep(prev => prev + 1);
    }
  };

  const prevStep = () => {
    setCurrentStep(prev => Math.max(0, prev - 1));
  };

  async function onSubmit(values: z.infer<typeof formSchema>) {
    setIsGenerating(true);
    setQuestions(null);
    setProgress(25);

    const progressInterval = setInterval(() => {
      setProgress(prev => {
        if (prev >= 90) {
          clearInterval(progressInterval);
          return prev;
        }
        return prev + Math.random() * 8 + 2;
      });
    }, 800);

    try {
      const response = await fetch('/api/ai/custom-quiz', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          ...values,
          isPro: user?.plan === 'Pro',
          questionTypes: ["Multiple Choice"],
          questionStyles: ["Knowledge-based", "Conceptual"],
          timeLimit: values.numberOfQuestions,
          userAge: user?.age,
          userClass: user?.className || 'General Student',
          specificInstructions: "For each question, provide a detailed explanation for the correct answer."
        })
      });

      clearInterval(progressInterval);
      setProgress(95);

      if (!response.ok) {
        throw new Error('Failed to generate questions');
      }

      const result = await response.json();

      if (result.error) {
        throw new Error(result.error);
      }
      if (!result.quiz || result.quiz.length === 0) {
        throw new Error("The AI failed to generate any questions. Please try refining your topic.");
      }

      setProgress(100);
      setTimeout(() => {
        setQuestions(result.quiz as Question[]);
      }, 500);

    } catch (error: any) {
      clearInterval(progressInterval);
      toast({
        title: "Error Generating Questions",
        description: error.message || "An error occurred while generating practice questions. The AI might be busy.",
        variant: "destructive",
      });
      console.error(error);
    } finally {
      setIsGenerating(false);
    }
  }

  const downloadPdf = async () => {
    if (!questions) return;
    const { default: jsPDF } = await import('jspdf');
    const doc = new jsPDF();
    const topic = form.getValues('topic');
    let y = 40;
    const margin = 20;
    const maxWidth = doc.internal.pageSize.getWidth() - (margin * 2);
    const pageHeight = 270;

    const checkPageBreak = (neededHeight: number) => {
      if (y + neededHeight > pageHeight) {
        doc.addPage();
        y = 40;
      }
    };

    questions.forEach((q, index) => {
      checkPageBreak(50);

      doc.setFontSize(12);
      doc.setFont('helvetica', 'bold');
      const questionText = doc.splitTextToSize(`${index + 1}. ${q.question}`, maxWidth);
      doc.text(questionText, margin, y);
      y += (questionText.length * 5) + 5;

      doc.setFont('helvetica', 'normal');
      doc.setFontSize(11);
      if (q.answers) {
        q.answers.forEach((opt, i) => {
          checkPageBreak(5);
          const optionLetter = String.fromCharCode(65 + i);
          const optionText = doc.splitTextToSize(`${optionLetter}. ${opt}`, maxWidth - 10);
          doc.text(optionText, margin + 5, y);
          y += (optionText.length * 4) + 2;
        });
      }

      y += 4;
      doc.setFont('helvetica', 'bold');
      doc.setTextColor(34, 139, 34);
      checkPageBreak(5);
      const answerText = doc.splitTextToSize(`Answer: ${q.correctAnswer}`, maxWidth);
      doc.text(answerText, margin, y);
      y += (answerText.length * 5) + 2;
      doc.setTextColor(0, 0, 0);

      y += 10;
    });

    addPdfHeaderAndFooter(doc, `Practice Questions: ${topic}`, user?.plan === 'Pro');
    doc.save(`${form.getValues('topic').replace(/\s+/g, '_')}_practice_questions.pdf`);
  };

  if (isGenerating) {
    return (
      <div>
        <QuizGenerationLoading
          progress={progress}
          onRetry={() => onSubmit(form.getValues())}
        />
      </div>
    );
  }

  if (questions && questions.length > 0) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-background via-background to-primary/5">
        <div className="container-modern py-8">
          <div className="text-center mb-8">
            <h1 className="text-3xl font-bold">Practice Questions</h1>
            <p className="text-lg text-muted-foreground font-medium mt-2">
              {questions.length} questions generated for: {form.getValues('topic')}
            </p>
          </div>

          <div className="flex flex-col sm:flex-row gap-4 mb-6">
            <Button onClick={() => setQuestions(null)} variant="outline">
              <Sparkles className="w-4 h-4 mr-2" />
              Generate More Questions
            </Button>
            <Button onClick={downloadPdf} variant="default">
              <Download className="w-4 h-4 mr-2" />
              Download PDF
            </Button>
          </div>

          <div className="space-y-4">
            {questions.map((question, index) => (
              <Card key={index} className="w-full">
                <CardHeader className="pb-4">
                  <CardTitle className="text-base md:text-lg leading-relaxed">
                    <div className="flex items-start gap-3">
                      <span className="bg-primary text-primary-foreground rounded-full w-7 h-7 md:w-6 md:h-6 flex items-center justify-center text-sm font-bold flex-shrink-0 mt-0.5">
                        {index + 1}
                      </span>
                      <span className="block leading-relaxed break-words">{question.question}</span>
                    </div>
                  </CardTitle>
                </CardHeader>
                <CardContent className="pt-0 space-y-3 md:space-y-4 px-4 md:px-6">
                  {question.answers && (
                    <Accordion type="multiple" className="w-full space-y-2 md:space-y-3">
                      <AccordionItem value={`options-${index}`} className="border rounded-lg">
                        <AccordionTrigger className="flex items-center justify-between px-3 py-3 md:px-4 md:py-3 text-left hover:no-underline text-sm md:text-base">
                          <span className="pr-2">View Options (A, B, C, D)</span>
                        </AccordionTrigger>
                        <AccordionContent className="px-3 pb-4 md:px-4 md:pb-4">
                          <div className="grid grid-cols-1 md:grid-cols-2 gap-3 md:gap-3">
                            {question.answers.map((answer, answerIndex) => (
                              <div
                                key={answerIndex}
                                className="p-3 md:p-3 rounded-lg border bg-muted/30 border-muted min-h-[2.5rem] flex items-start md:items-center"
                              >
                                <span className="font-medium mr-2 flex-shrink-0 text-sm md:text-base">
                                  {String.fromCharCode(65 + answerIndex)}.
                                </span>
                                <span className="text-sm md:text-sm leading-relaxed break-words">{answer}</span>
                              </div>
                            ))}
                          </div>
                        </AccordionContent>
                      </AccordionItem>

                      <AccordionItem value={`answer-${index}`} className="border rounded-lg">
                        <AccordionTrigger className="flex items-center justify-between px-3 py-3 md:px-4 md:py-3 text-left hover:no-underline text-sm md:text-base">
                          <span className="flex items-center gap-2">
                            <Eye className="w-4 h-4 flex-shrink-0" />
                            <span className="block">Show Answer</span>
                          </span>
                        </AccordionTrigger>
                        <AccordionContent className="px-3 pb-4 md:px-4 md:pb-4">
                          <div className="bg-green-50 dark:bg-green-950/30 border border-green-200 dark:border-green-800 p-4 rounded-lg">
                            <div className="flex items-start gap-2 mb-2">
                              <div className="w-2 h-2 bg-green-500 rounded-full flex-shrink-0 mt-1.5"></div>
                              <div className="font-medium text-green-800 dark:text-green-200 break-words leading-relaxed">
                                <span className="block text-sm md:text-base">Correct Answer:</span>
                                <span className="text-sm md:text-sm leading-relaxed">
                                  {String.fromCharCode(65 + question.answers.indexOf(question.correctAnswer))}. {question.correctAnswer}
                                </span>
                              </div>
                            </div>
                          </div>
                        </AccordionContent>
                      </AccordionItem>

                      {question.explanation && (
                        <AccordionItem value={`explanation-${index}`} className="border rounded-lg">
                          <AccordionTrigger className="flex items-center justify-between px-3 py-3 md:px-4 md:py-3 text-left hover:no-underline text-sm md:text-base">
                            <span className="flex items-center gap-2">
                              <AlertTriangle className="w-4 h-4 flex-shrink-0" />
                              <span className="block">Show Explanation</span>
                            </span>
                          </AccordionTrigger>
                          <AccordionContent className="px-3 pb-4 md:px-4 md:pb-4">
                            <Alert>
                              <AlertTriangle className="h-4 w-4 flex-shrink-0" />
                              <AlertTitle className="text-sm md:text-base">Explanation</AlertTitle>
                              <AlertDescription className="text-sm md:text-sm leading-relaxed break-words mt-2">
                                {question.explanation}
                              </AlertDescription>
                            </Alert>
                          </AccordionContent>
                        </AccordionItem>
                      )}
                    </Accordion>
                  )}
                </CardContent>
              </Card>
            ))}
          </div>

          <div className="mt-8">
            <GenerationAd />
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-background via-background to-primary/5">
      <div className="container mx-auto flex min-h-[calc(100vh-10rem)] flex-col items-center justify-center px-4 py-12">
        <FormProvider {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="w-full max-w-2xl">
            <Card className="overflow-hidden">
              <CardHeader>
                <div className="flex flex-col items-center text-center">
                  <h1 className="font-headline text-3xl font-bold tracking-tight">Create Practice Questions</h1>
                  <p className="mt-1 text-muted-foreground">{steps[currentStep].description}</p>
                </div>
                <Progress value={((currentStep + 1) / steps.length) * 100} className="mt-4" />
              </CardHeader>
              <CardContent className="min-h-[350px]">
                <AnimatePresence mode="wait">
                  <motion.div
                    key={currentStep}
                    initial={{ x: 30, opacity: 0 }}
                    animate={{ x: 0, opacity: 1 }}
                    exit={{ x: -30, opacity: 0 }}
                    transition={{ duration: 0.3 }}
                  >
                    {/* Step 0: Topic */}
                    {currentStep === 0 && (
                      <FormField name="topic" control={form.control} render={({ field }) => (
                        <FormItem>
                          <FormControl>
                            <Input autoFocus className="h-12 text-lg text-center placeholder:text-muted-foreground" placeholder="e.g., Cellular Respiration" {...field} />
                          </FormControl>
                          <FormMessage className="text-center" />
                        </FormItem>
                      )} />
                    )}
                    {/* Step 1: Mode */}
                    {currentStep === 1 && (
                      <FormField name="mode" control={form.control} render={({ field }) => (
                        <FormItem>
                          <RadioGroup onValueChange={field.onChange} defaultValue={field.value} className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <Label className="flex-1 cursor-pointer rounded-md border-2 border-transparent p-4 transition-all has-[:checked]:border-primary">
                              <RadioGroupItem value="practice" className="sr-only" />
                              <div className="flex items-center gap-3 mb-2">
                                <BookOpen className="h-6 w-6 text-primary" />
                                <span className="font-bold text-lg">Practice Mode</span>
                              </div>
                              <span className="text-sm text-muted-foreground">Get instant feedback after each question. No timer.</span>
                            </Label>
                            <Label className="flex-1 cursor-pointer rounded-md border-2 border-transparent p-4 transition-all has-[:checked]:border-primary">
                              <RadioGroupItem value="exam" className="sr-only" />
                              <div className="flex items-center gap-3 mb-2">
                                <Edit className="h-6 w-6 text-primary" />
                                <span className="font-bold text-lg">Exam Mode</span>
                              </div>
                              <span className="text-sm text-muted-foreground">Simulate a test with a timer. Results at the end.</span>
                            </Label>
                          </RadioGroup>
                        </FormItem>
                      )} />
                    )}
                    {/* Step 2: Styles */}
                    {currentStep === 2 && (
                      <FormField name="questionStyles" control={form.control} render={() => (
                        <FormItem>
                          <div className="grid grid-cols-2 md:grid-cols-3 gap-2">
                            {questionStyles.map((item) => (
                              <FormField key={item.id} control={form.control} name="questionStyles" render={({ field }) => (
                                <FormItem>
                                  <Label className="flex flex-row items-center space-x-2 space-y-0 rounded-md border p-3 cursor-pointer has-[:checked]:border-primary">
                                    <FormControl>
                                      <Checkbox
                                        checked={field.value?.includes(item.id)}
                                        onCheckedChange={(checked) => (checked
                                          ? field.onChange([...field.value, item.id])
                                          : field.onChange(field.value?.filter((value) => value !== item.id))
                                        )}
                                      />
                                    </FormControl>
                                    <div className="space-y-0.5 leading-none">
                                      <span className="font-normal text-sm">{item.label}</span>
                                    </div>
                                  </Label>
                                </FormItem>
                              )} />
                            ))}
                          </div>
                          <FormMessage />
                        </FormItem>
                      )} />
                    )}
                    {/* Step 3: Config */}
                    {currentStep === 3 && (
                      <div className="space-y-8 pt-4">
                        <FormField control={form.control} name="difficulty" render={({ field }) => (
                          <FormItem>
                            <FormLabel className="text-base font-semibold">Difficulty</FormLabel>
                            <RadioGroup onValueChange={field.onChange} defaultValue={field.value} className="flex gap-4">
                              <Label className="flex items-center space-x-2 cursor-pointer">
                                <RadioGroupItem value="easy" />
                                <span>Easy</span>
                              </Label>
                              <Label className="flex items-center space-x-2 cursor-pointer">
                                <RadioGroupItem value="medium" />
                                <span>Medium</span>
                              </Label>
                              <Label className="flex items-center space-x-2 cursor-pointer">
                                <RadioGroupItem value="hard" />
                                <span>Hard</span>
                              </Label>
                            </RadioGroup>
                          </FormItem>
                        )} />
                        <FormField control={form.control} name="numberOfQuestions" render={({ field }) => (
                          <FormItem>
                            <FormLabel className="text-base font-semibold">Number of Questions: {field.value}</FormLabel>
                            <FormControl>
                              <Slider min={3} max={80} step={1} value={[field.value]} onValueChange={(vals) => field.onChange(vals[0])} />
                            </FormControl>
                          </FormItem>
                        )} />
                        {form.getValues('mode') === 'exam' && (
                          <FormField control={form.control} name="timeLimit" render={({ field }) => (
                            <FormItem>
                              <FormLabel className="text-base font-semibold">Time Limit (minutes): {field.value}</FormLabel>
                              <FormControl>
                                <Slider min={1} max={120} step={1} value={[field.value]} onValueChange={(vals) => field.onChange(vals[0])} />
                              </FormControl>
                            </FormItem>
                          )} />
                        )}
                      </div>
                    )}
                    {/* Step 4: Summary */}
                    {currentStep === 4 && (
                      <div className="space-y-4">
                        <Card className="bg-muted/50">
                          <CardHeader><CardTitle>Review Your Settings</CardTitle></CardHeader>
                          <CardContent className="space-y-2">
                            <p><strong>📚 Topic:</strong> {form.getValues('topic')}</p>
                            <p><strong>🎯 Mode:</strong> <span className="capitalize">{form.getValues('mode')}</span></p>
                            <p><strong>📊 Questions:</strong> {form.getValues('numberOfQuestions')}</p>
                            {form.getValues('mode') === 'exam' && <p><strong>⏰ Time:</strong> {form.getValues('timeLimit')} minutes</p>}
                            <p><strong>🎨 Styles:</strong> {form.getValues('questionStyles').join(', ')}</p>
                          </CardContent>
                        </Card>
                      </div>
                    )}
                  </motion.div>
                </AnimatePresence>
              </CardContent>
              <div className="flex items-center justify-between border-t p-4">
                <Button type="button" variant="ghost" onClick={prevStep} disabled={currentStep === 0}>
                  <ArrowLeft className="mr-2 h-4 w-4" /> Back
                </Button>
                {currentStep < steps.length - 1 ? (
                  <Button type="button" onClick={nextStep}>
                    Next
                  </Button>
                ) : (
                  <Button type="submit" disabled={isGenerating}>
                    <Sparkles className="mr-2 h-5 w-5" /> Generate Questions
                  </Button>
                )}
              </div>
            </Card>
          </form>
        </FormProvider>
      </div>
    </div>
  );
}
