
"use client";

import { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { Loader2, Sparkles, BookOpen, Download, AlertTriangle, Eye } from "lucide-react";

import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { PageHeader } from "@/components/page-header";
import { useToast } from "@/hooks/use-toast";
// Dynamic import for AI function
type GenerateCustomQuizOutput = any;
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { cn } from "@/lib/utils";
import { Slider } from "@/components/ui/slider";
import { Textarea } from "@/components/ui/textarea";
import { usePlan } from "@/hooks/usePlan";
import { useAuth } from "@/context/AuthContext";
import { GenerationAd } from "@/components/ads/ad-banner";

const formSchema = z.object({
  topic: z.string().min(3, "Topic(s) or chapter(s) are required."),
  difficulty: z.enum(["easy", "medium", "hard", "master"]),
  numberOfQuestions: z.number().min(1).max(55),
});

type Question = GenerateCustomQuizOutput['quiz'][number] & { explanation?: string };

const addPdfHeaderAndFooter = (doc: any, title: string, isPro: boolean) => {
    const pageCount = (doc as any).internal.getNumberOfPages();
    const pageWidth = doc.internal.pageSize.getWidth();
    const pageHeight = doc.internal.pageSize.getHeight();

    for (let i = 1; i <= pageCount; i++) {
        doc.setPage(i);
        
        doc.setFont('helvetica', 'bold');
        doc.setFontSize(16);
        doc.text("Quizzicallabs™", pageWidth / 2, 15, { align: 'center' });

        doc.setFontSize(14);
        doc.text(title, pageWidth / 2, 25, { align: 'center' });
        doc.setLineWidth(0.2);
        doc.line(20, 32, pageWidth - 20, 32);
        
        if (!isPro) {
            doc.saveGraphicsState();
            doc.setFontSize(60);
            doc.setTextColor(230, 230, 230);
            doc.setGState(new (doc as any).GState({opacity: 0.5}));
            doc.text("Quizzicallabs AI", pageWidth / 2, pageHeight / 2, { angle: 45, align: 'center' });
            doc.restoreGraphicsState();
        }

        doc.setFont('helvetica', 'normal');
        doc.setFontSize(8);
        doc.setLineWidth(0.2);
        doc.line(20, pageHeight - 18, pageWidth - 20, pageHeight - 18);
        doc.text(`Generated by Quizzicallabs™ - A Project By Absar Ahmad Rao`, pageWidth / 2, pageHeight - 10, { align: 'center' });
    }
}


export default function GenerateQuestionsPage() {
  const { toast } = useToast();
  const { user } = useAuth();
  const { isPro } = usePlan();
  const [isGenerating, setIsGenerating] = useState(false);
  const [questions, setQuestions] = useState<Question[] | null>(null);
  const [visibleAnswers, setVisibleAnswers] = useState<Record<number, boolean>>({});

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      topic: "",
      difficulty: "medium",
      numberOfQuestions: 10,
    },
  });

  async function onSubmit(values: z.infer<typeof formSchema>) {
    setIsGenerating(true);
    setQuestions(null);
    setVisibleAnswers({});
    try {
      const response = await fetch('/api/ai/custom-quiz', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          ...values,
          isPro: user?.plan === 'Pro',
          questionTypes: ["Multiple Choice"],
          questionStyles: ["Knowledge-based", "Conceptual"],
          timeLimit: values.numberOfQuestions,
          userAge: user?.age,
          userClass: user?.className || 'General Student',
          specificInstructions: "For each question, provide a detailed explanation for the correct answer."
        })
      });
      
      if (!response.ok) {
        throw new Error('Failed to generate questions');
      }
      
      const result = await response.json();
      
      if (result.error) {
        throw new Error(result.error);
      }
      if (!result.quiz || result.quiz.length === 0) {
        throw new Error("The AI failed to generate any questions. Please try refining your topic.");
      }
      setQuestions(result.quiz as Question[]);
    } catch (error: any) {
      toast({
        title: "Error Generating Questions",
        description: error.message || "An error occurred while generating practice questions. The AI might be busy.",
        variant: "destructive",
      });
      console.error(error);
    } finally {
      setIsGenerating(false);
    }
  }

  const toggleAnswerVisibility = (index: number) => {
    setVisibleAnswers(prev => ({ ...prev, [index]: !prev[index] }));
  };

  const downloadPdf = async () => {
    if (!questions) return;
    const { default: jsPDF } = await import('jspdf');
    const doc = new jsPDF();
    const topic = form.getValues('topic');
    let y = 40;
    const margin = 20;
    const maxWidth = doc.internal.pageSize.getWidth() - (margin * 2);
    const pageHeight = 270;

    const checkPageBreak = (neededHeight: number) => {
        if (y + neededHeight > pageHeight) {
            doc.addPage();
            y = 40;
        }
    };

    questions.forEach((q, index) => {
        checkPageBreak(50); // Estimate height for a question block
        
        doc.setFontSize(12);
        doc.setFont('helvetica', 'bold');
        const questionText = doc.splitTextToSize(`${index + 1}. ${q.question}`, maxWidth);
        doc.text(questionText, margin, y);
        y += (questionText.length * 5) + 5;

        doc.setFont('helvetica', 'normal');
        doc.setFontSize(11);
        if (q.answers) {
            q.answers.forEach((opt, i) => {
                checkPageBreak(5);
                const optionLetter = String.fromCharCode(65 + i);
                const optionText = doc.splitTextToSize(`${optionLetter}. ${opt}`, maxWidth - 10);
                doc.text(optionText, margin + 5, y);
                y += (optionText.length * 4) + 2;
            });
        }
        
        y += 4;
        doc.setFont('helvetica', 'bold');
        doc.setTextColor(34, 139, 34); // Green color for answer
        checkPageBreak(5);
        const answerText = doc.splitTextToSize(`Answer: ${q.correctAnswer}`, maxWidth);
        doc.text(answerText, margin, y);
        y += (answerText.length * 5) + 2;
        doc.setTextColor(0, 0, 0); // Reset color
        
        y += 10;
    });
    
    addPdfHeaderAndFooter(doc, `Practice Questions: ${topic}`, user?.plan === 'Pro');

    doc.save(`${form.getValues('topic').replace(/\s+/g, '_')}_practice_questions.pdf`);
  };

  return (
    <>
      <PageHeader
        title="Practice Questions Generator"
        description="Generate topic-specific practice questions with correct answers instantly."
      />
      <div className="max-w-2xl mx-auto">
          <Card>
            <CardHeader>
              <CardTitle>Question Parameters</CardTitle>
              <CardDescription>Fill out the form to generate your practice questions.</CardDescription>
            </CardHeader>
            <CardContent>
              <Form {...form}>
                <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
                  <FormField
                    control={form.control}
                    name="topic"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Topic(s) / Chapter(s)</FormLabel>
                        <FormControl>
                          <Textarea placeholder="e.g., Photosynthesis, Newton's Laws of Motion" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name="difficulty"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Difficulty</FormLabel>
                        <FormControl>
                            <div className="flex gap-2">
                                {["easy", "medium", "hard", "master"].map(level => (
                                    <Button key={level} type="button" variant={field.value === level ? 'default' : 'outline'} onClick={() => field.onChange(level)} className="flex-1 capitalize">{level}</Button>
                                ))}
                            </div>
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  
                  <FormField
                    control={form.control}
                    name="numberOfQuestions"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Number of Questions: <span className="font-bold text-primary">{field.value}</span></FormLabel>
                        <FormControl>
                          <Slider
                              onValueChange={(value) => field.onChange(value[0])}
                              defaultValue={[field.value]}
                              max={55}
                              min={1}
                              step={1}
                          />
                        </FormControl>
                         <Alert className="mt-2 text-xs p-2">
                           <AlertTriangle className="h-4 w-4"/>
                           <AlertDescription>
                             The AI-generated count may sometimes vary slightly from your selection.
                           </AlertDescription>
                        </Alert>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  
                  <Button type="submit" className="w-full" size="lg" disabled={isGenerating}>
                    {isGenerating ? (
                      <>
                        <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                        Generating...
                      </>
                    ) : (
                      <>
                        <Sparkles className="mr-2 h-4 w-4"/>
                        Generate Questions
                      </>
                    )}
                  </Button>
                </form>
              </Form>
            </CardContent>
          </Card>
      </div>
        <div className="max-w-4xl mx-auto w-full mt-8">
            <Card className="min-h-[400px]">
                <CardHeader className="flex-row items-center justify-between">
                <div>
                    <CardTitle>Generated Questions</CardTitle>
                    <CardDescription>Click on a question to reveal the correct answer.</CardDescription>
                </div>
                {questions && questions.length > 0 && (
                    <Button onClick={downloadPdf} variant="outline" size="sm">
                    <Download className="mr-2 h-4 w-4" />
                    Download PDF
                    </Button>
                )}
                </CardHeader>
                <CardContent>
                {isGenerating && (
                    <div className="flex flex-col items-center justify-center h-64">
                    <Loader2 className="h-8 w-8 animate-spin text-primary mb-4" />
                    <p className="text-muted-foreground mb-4">Generating practice questions...</p>
                    <GenerationAd />
                    </div>
                )}
                {questions && (
                    <Accordion type="single" collapsible className="w-full space-y-4">
                    {questions.map((q, index) => (
                        <AccordionItem value={`item-${index}`} key={index} className="border-b-0">
                        <Card className="bg-muted/50">
                            <AccordionTrigger className="text-left p-6 hover:no-underline">
                            <span className="flex-1 font-semibold">{index + 1}. {q.question}</span>
                            </AccordionTrigger>
                            <AccordionContent className="px-6 pb-6">
                            {q.answers && (
                                <div className="mb-4">
                                <h4 className="font-semibold mb-3 text-sm text-muted-foreground">Options:</h4>
                                <ul className="space-y-2">
                                    {q.answers.map((opt, i) => (
                                    <li key={i} className={cn(
                                        "p-3 rounded-md border text-sm",
                                        visibleAnswers[index] && opt === q.correctAnswer ? "border-primary bg-primary/10 font-semibold" : "bg-background"
                                        )}
                                    >
                                        {opt}
                                    </li>
                                    ))}
                                </ul>
                                </div>
                            )}

                            {visibleAnswers[index] ? (
                                <div className="space-y-4">
                                <Alert className="border-primary/50 text-primary-900 dark:text-primary-200 bg-primary/10">
                                    <AlertTitle className="text-primary dark:text-primary-300 font-bold">Correct Answer</AlertTitle>
                                    <AlertDescription className="text-primary/90 dark:text-primary-200/90">
                                        {q.correctAnswer}
                                    </AlertDescription>
                                </Alert>
                                </div>
                            ) : (
                                <Button onClick={() => toggleAnswerVisibility(index)} variant="outline">
                                <Eye className="mr-2 h-4 w-4" />
                                Show Answer
                                </Button>
                            )}
                            </AccordionContent>
                        </Card>
                        </AccordionItem>
                    ))}
                    </Accordion>
                )}
                {!isGenerating && !questions && (
                    <div className="flex flex-col items-center justify-center h-64 text-center">
                    <BookOpen className="h-12 w-12 text-muted-foreground/50 mb-4" />
                    <p className="text-muted-foreground">Your generated questions will appear here.</p>
                    <p className="text-xs text-muted-foreground mt-1">Fill out the form to get started.</p>
                    </div>
                )}
                </CardContent>
            </Card>
        </div>
    </>
  );
}
