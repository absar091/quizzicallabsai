
"use client";

import { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { Loader2, Sparkles, BookOpen, Download, AlertTriangle, Eye } from "lucide-react";

import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { PageHeader } from "@/components/page-header";
import { useToast } from "@/hooks/use-toast";
// Dynamic import for AI function
type GenerateCustomQuizOutput = any;
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { cn } from "@/lib/utils";
import { Slider } from "@/components/ui/slider";
import { Textarea } from "@/components/ui/textarea";
import { usePlan } from "@/hooks/usePlan";
import { useAuth } from "@/context/AuthContext";
import { GenerationAd } from "@/components/ads/ad-banner";
import { QuestionsWizard } from "@/components/quiz-wizard/questions-wizard";

const formSchema = z.object({
  topic: z.string().min(3, "Topic(s) or chapter(s) are required."),
  difficulty: z.enum(["easy", "medium", "hard", "master"]),
  numberOfQuestions: z.number().min(1).max(55),
});

type Question = GenerateCustomQuizOutput['quiz'][number] & { explanation?: string };

const addPdfHeaderAndFooter = (doc: any, title: string, isPro: boolean) => {
    const pageCount = (doc as any).internal.getNumberOfPages();
    const pageWidth = doc.internal.pageSize.getWidth();
    const pageHeight = doc.internal.pageSize.getHeight();

    for (let i = 1; i <= pageCount; i++) {
        doc.setPage(i);
        
        doc.setFont('helvetica', 'bold');
        doc.setFontSize(16);
        doc.text("Quizzicallabs™", pageWidth / 2, 15, { align: 'center' });

        doc.setFontSize(14);
        doc.text(title, pageWidth / 2, 25, { align: 'center' });
        doc.setLineWidth(0.2);
        doc.line(20, 32, pageWidth - 20, 32);
        
        if (!isPro) {
            doc.saveGraphicsState();
            doc.setFontSize(60);
            doc.setTextColor(230, 230, 230);
            doc.setGState(new (doc as any).GState({opacity: 0.5}));
            doc.text("Quizzicallabs AI", pageWidth / 2, pageHeight / 2, { angle: 45, align: 'center' });
            doc.restoreGraphicsState();
        }

        doc.setFont('helvetica', 'normal');
        doc.setFontSize(8);
        doc.setLineWidth(0.2);
        doc.line(20, pageHeight - 18, pageWidth - 20, pageHeight - 18);
        doc.text(`Generated by Quizzicallabs™ - A Project By Absar Ahmad Rao`, pageWidth / 2, pageHeight - 10, { align: 'center' });
    }
}


export default function GenerateQuestionsPage() {
  const { toast } = useToast();
  const { user } = useAuth();
  const { isPro } = usePlan();
  const [isGenerating, setIsGenerating] = useState(false);
  const [questions, setQuestions] = useState<Question[] | null>(null);
  const [visibleAnswers, setVisibleAnswers] = useState<Record<number, boolean>>({});

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      topic: "",
      difficulty: "medium",
      numberOfQuestions: 10,
    },
  });

  async function onSubmit(values: z.infer<typeof formSchema>) {
    setIsGenerating(true);
    setQuestions(null);
    setVisibleAnswers({});
    try {
      const response = await fetch('/api/ai/custom-quiz', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          ...values,
          isPro: user?.plan === 'Pro',
          questionTypes: ["Multiple Choice"],
          questionStyles: ["Knowledge-based", "Conceptual"],
          timeLimit: values.numberOfQuestions,
          userAge: user?.age,
          userClass: user?.className || 'General Student',
          specificInstructions: "For each question, provide a detailed explanation for the correct answer."
        })
      });
      
      if (!response.ok) {
        throw new Error('Failed to generate questions');
      }
      
      const result = await response.json();
      
      if (result.error) {
        throw new Error(result.error);
      }
      if (!result.quiz || result.quiz.length === 0) {
        throw new Error("The AI failed to generate any questions. Please try refining your topic.");
      }
      setQuestions(result.quiz as Question[]);
    } catch (error: any) {
      toast({
        title: "Error Generating Questions",
        description: error.message || "An error occurred while generating practice questions. The AI might be busy.",
        variant: "destructive",
      });
      console.error(error);
    } finally {
      setIsGenerating(false);
    }
  }

  const toggleAnswerVisibility = (index: number) => {
    setVisibleAnswers(prev => ({ ...prev, [index]: !prev[index] }));
  };

  const downloadPdf = async () => {
    if (!questions) return;
    const { default: jsPDF } = await import('jspdf');
    const doc = new jsPDF();
    const topic = form.getValues('topic');
    let y = 40;
    const margin = 20;
    const maxWidth = doc.internal.pageSize.getWidth() - (margin * 2);
    const pageHeight = 270;

    const checkPageBreak = (neededHeight: number) => {
        if (y + neededHeight > pageHeight) {
            doc.addPage();
            y = 40;
        }
    };

    questions.forEach((q, index) => {
        checkPageBreak(50); // Estimate height for a question block
        
        doc.setFontSize(12);
        doc.setFont('helvetica', 'bold');
        const questionText = doc.splitTextToSize(`${index + 1}. ${q.question}`, maxWidth);
        doc.text(questionText, margin, y);
        y += (questionText.length * 5) + 5;

        doc.setFont('helvetica', 'normal');
        doc.setFontSize(11);
        if (q.answers) {
            q.answers.forEach((opt, i) => {
                checkPageBreak(5);
                const optionLetter = String.fromCharCode(65 + i);
                const optionText = doc.splitTextToSize(`${optionLetter}. ${opt}`, maxWidth - 10);
                doc.text(optionText, margin + 5, y);
                y += (optionText.length * 4) + 2;
            });
        }
        
        y += 4;
        doc.setFont('helvetica', 'bold');
        doc.setTextColor(34, 139, 34); // Green color for answer
        checkPageBreak(5);
        const answerText = doc.splitTextToSize(`Answer: ${q.correctAnswer}`, maxWidth);
        doc.text(answerText, margin, y);
        y += (answerText.length * 5) + 2;
        doc.setTextColor(0, 0, 0); // Reset color
        
        y += 10;
    });
    
    addPdfHeaderAndFooter(doc, `Practice Questions: ${topic}`, user?.plan === 'Pro');

    doc.save(`${form.getValues('topic').replace(/\s+/g, '_')}_practice_questions.pdf`);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-background via-background to-primary/5">
      <div className="container-modern py-8">
        <QuestionsWizard
          onGenerateQuestions={onSubmit}
          isGenerating={isGenerating}
        />
      </div>
    </div>
  );
}
