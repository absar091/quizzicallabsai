// 🔥 Quiz Arena - Live Multiplayer Quiz Security Rules v2
// Copy and paste this entire file to your Firebase Firestore Security Rules

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // 🔒 Quiz Rooms - Core game state management
    match /quiz-rooms/{roomId} {

      // ✅ Anyone can read rooms to join & sync (for public rooms & joining)
      allow read: if true;

      // ✅ Only authenticated users can create rooms (as host)
      allow create: if request.auth != null &&
        request.auth.uid == request.resource.data.hostId;

      // ✅ Host can update room state (start, next question, finish)
      // They can only update specific fields and must be the host
      allow update: if request.auth != null &&
        request.auth.uid == request.resource.data.hostId &&
        // Only allow updates to game state fields
        request.resource.data.keys().hasOnly([
          'started', 'finished', 'currentQuestion', 'startedAt', 'finishedAt'
        ]);

      // ❌ Host cannot delete rooms (prevents griefing)
      allow delete: if false;
    }

    // 🎮 Quiz Players - Subcollection for managing players in each room
    match /quiz-rooms/{roomId}/players/{userId} {

      // ✅ Anyone can read player list (for leaderboard)
      allow read: if true;

      // ✅ Authenticated players can join (only their own entry)
      // Allow create for authenticated users trying to join
      allow create: if request.auth != null;

      // ✅ Players can ONLY update their own score and join info
      allow update: if request.auth != null &&
        request.auth.uid == userId &&
        // Only allow score and join info updates
        request.resource.data.diff(request.resource).keys().hasOnly(['score', 'name']);

      // ❌ No deletions (players stay in room until game ends)
      allow delete: if false;
    }

    // 📝 Quiz Answers - Secure answer submission system
    match /quiz-rooms/{roomId}/answers/{answerId} {

      // ✅ Anyone can read answers (for leaderboard calculations)
      allow read: if true;

      // ✅ ONLY the authenticated user can submit their own answers
      allow create: if request.auth != null &&
        request.auth.uid == request.resource.data.userId &&
        // Answer must contain required fields AND be validated server-side
        request.resource.data.keys().hasAll([
          'userId', 'questionIndex', 'answerIndex', 'submittedAt', 'hash'
        ]) &&
        // Prevent spam - hash must be unique and contain roomId
        request.resource.data.hash.string().matches('^[a-zA-Z0-9_]+$');

      // ❌ No updates or deletions (answers are immutable)
      allow update, delete: if false;
    }

    // 🛡️ Server Validated Answers (for anti-cheat)
    match /quiz-rooms/{roomId}/validated-answers/{answerId} {
      // Only readable by room participants for leaderboard
      allow read: if true;
      // Only created by Cloud Function (server-side)
      allow create: if false;
      allow update, write: if false;
    }

    // 🎯 Quiz Discovery - Public rooms and system collections
    match /quiz-rooms {
      // ✅ Only read access for discovery
      allow read: if true;

      // 🔒 No write access to root collection
      allow write: if false;
    }

    // 🛡️ System collections (for future features)
    match /system/{document} {
      // 🔒 System-only access
      allow read, write: if false;
    }

    // 👤 User profiles (existing from your app)
    match /users/{userId} {
      // ✅ Users can read/write their own profile
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // 💬 Quiz results (existing from quiz feature)
    match /quiz-results/{document} {
      // Your existing quiz results rules
      allow read, write: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }

    // Keep as read-only for public access to shared quizzes
    match /shared-quizzes/{document} {
      allow read: if true;
    }

    // 🕒 Default deny-all rule for any other collections
    match /{document} {
      allow read, write: if false;
    }
  }


}
